version: '3.8'

networks:
  kaleem-net:
    driver: bridge

# === أسرار (ملفات تُنشئها خارج Git داخل ./secrets) ===
secrets:
  jwt_secret: { file: ./secrets/jwt_secret }
  smtp_pass: { file: ./secrets/smtp_pass }
  openai_key: { file: ./secrets/openai_key }
  gemini_key: { file: ./secrets/gemini_key }
  n8n_api_key: { file: ./secrets/n8n_api_key }

volumes:
  mongo_prod_data:
  redis_prod_data:
  rabbitmq_prod_data:
  uploads_data:

services:
  # ===================== التطبيق =====================
  api:
    image: ${KALEEM_API_IMAGE:-ghcr.io/kaleem/kaleem-api:latest}
    container_name: kaleem-api-prod
    # انشر المنفذ فقط إذا لا توجد طبقة Proxy أمامه
    ports:
      - '127.0.0.1:3000:3000'
    env_file: [.env.production]
    environment:
      NODE_ENV: production
      PORT: 3000
      TZ: Asia/Riyadh
      # دعم secrets بأسلوب *_FILE (فعّله في كودك كما عملنا سابقًا)
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      MAIL_PASS_FILE: /run/secrets/smtp_pass
      OPENAI_API_KEY_FILE: /run/secrets/openai_key
      GEMINI_API_KEY_FILE: /run/secrets/gemini_key
      N8N_API_KEY_FILE: /run/secrets/n8n_api_key
      # IMPORTANT: تأكد أن MONGODB_URI/REDIS_URL/RABBIT_URL تشير لأسماء الخدمات أدناه
    secrets:
      - jwt_secret
      - smtp_pass
      - openai_key
      - gemini_key
      - n8n_api_key
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      mongo: { condition: service_healthy }
      mongo-init:
        condition: service_completed_successfully
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -fsS http://localhost:3000/api/health >/dev/null || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [kaleem-net]
    user: '1000:1000'
    read_only: true
    tmpfs: ['/tmp']
    security_opt: ['no-new-privileges:true']
    cap_drop: ['ALL']
    logging:
      driver: json-file
      options: { max-size: '10m', max-file: '3' }

  # ===================== Mongo (Replica Set) =====================
  mongo:
    image: mongo:7
    container_name: kaleem-mongo-prod
    command: ['mongod', '--replSet', 'rs0', '--bind_ip_all']
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    volumes:
      - mongo_prod_data:/data/db
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "mongosh --quiet --eval 'db.adminCommand({ ping: 1 }).ok' || exit 1",
        ]
      interval: 15s
      timeout: 10s
      retries: 10
    networks: [kaleem-net]
    logging:
      driver: json-file
      options: { max-size: '10m', max-file: '3' }

  mongo-init:
    image: mongo:7
    container_name: kaleem-mongo-init
    depends_on:
      mongo: { condition: service_healthy }
    entrypoint: >
      bash -lc "
      mongosh 'mongodb://$${MONGO_ROOT_USER}:$${MONGO_ROOT_PASSWORD}@mongo:27017/admin'
      --eval 'rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"mongo:27017\"}]})' || true
      "
    environment:
      MONGO_ROOT_USER: ${MONGO_ROOT_USER}
      MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    networks: [kaleem-net]
    restart: 'no'

  # ===================== Redis =====================
  redis:
    image: redis:7-alpine
    container_name: kaleem-redis-prod
    command: ['redis-server', '/usr/local/etc/redis/redis.conf']
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [kaleem-net]
    logging:
      driver: json-file
      options: { max-size: '5m', max-file: '3' }

  # ===================== RabbitMQ (بدون منافذ إدارية) =====================
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: kaleem-rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    # لا منافذ منشورة: 5672/15672/15692 كلها داخل الشبكة فقط
    volumes:
      - rabbitmq_prod_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 15s
      timeout: 10s
      retries: 10
    networks: [kaleem-net]
    logging:
      driver: json-file
      options: { max-size: '10m', max-file: '3' }

  # ===================== Workers =====================
  ai-reply-worker:
    image: ${KALEEM_API_IMAGE:-ghcr.io/kaleem/kaleem-api:latest}
    container_name: kaleem-ai-worker-prod
    command: ['node', 'dist/src/workers/ai-incoming.consumer.js']
    env_file: [.env.production]
    environment:
      NODE_ENV: production
      WORKER_TYPE: ai-reply
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      OPENAI_API_KEY_FILE: /run/secrets/openai_key
      GEMINI_API_KEY_FILE: /run/secrets/gemini_key
    secrets:
      - jwt_secret
      - openai_key
      - gemini_key
    depends_on:
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
      mongo: { condition: service_healthy }
      mongo-init:
        condition: service_completed_successfully
    restart: unless-stopped
    networks: [kaleem-net]
    user: '1000:1000'
    read_only: true
    tmpfs: ['/tmp']
    security_opt: ['no-new-privileges:true']
    cap_drop: ['ALL']
    logging:
      driver: json-file
      options: { max-size: '10m', max-file: '3' }

  webhook-dispatcher:
    image: ${KALEEM_API_IMAGE:-ghcr.io/kaleem/kaleem-api:latest}
    container_name: kaleem-webhook-worker-prod
    command: ['node', 'dist/src/workers/webhook-dispatcher.consumer.js']
    env_file: [.env.production]
    environment:
      NODE_ENV: production
      WORKER_TYPE: webhook-dispatcher
      JWT_SECRET_FILE: /run/secrets/jwt_secret
    secrets:
      - jwt_secret
    depends_on:
      rabbitmq: { condition: service_healthy }
      mongo: { condition: service_healthy }
      mongo-init:
        condition: service_completed_successfully
    restart: unless-stopped
    networks: [kaleem-net]
    user: '1000:1000'
    read_only: true
    tmpfs: ['/tmp']
    security_opt: ['no-new-privileges:true']
    cap_drop: ['ALL']
    logging:
      driver: json-file
      options: { max-size: '10m', max-file: '3' }
