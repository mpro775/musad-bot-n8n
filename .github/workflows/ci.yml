name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/kaleem-api

jobs:
  # ===== مرحلة التحقق والاختبار =====
  lint_test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run build

      - name: Run unit tests with coverage
        run: npm run test:cov

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

      - name: Check coverage threshold
        run: |
          COVERAGE=$(grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Coverage is below 70%"
            exit 1
          else
            echo "✅ Coverage is above 70%"
          fi

  # ===== مرحلة الأمان =====
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===== مرحلة بناء ومسح الصورة =====
  build_scan_push:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint_test, security_scan]
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.15.11
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # ===== بوابة النشر =====
  deploy_gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: build_scan_push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Manual approval checkpoint
        run: |
          echo "🚀 Ready for deployment!"
          echo "Image: ${{ needs.build_scan_push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build_scan_push.outputs.image-digest }}"
          echo "Awaiting manual approval..."

      - name: Post deployment info
        run: |
          echo "✅ Deployment approved!"
          echo "Next steps:"
          echo "1. Pull image: docker pull ${{ needs.build_scan_push.outputs.image-tag }}"
          echo "2. Deploy with: docker-compose up -d"

  # ===== اختبار التكامل (اختياري) =====
  integration_test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint_test
    if: github.event_name == 'pull_request'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:e2e
        env:
          MONGODB_URI: mongodb://localhost:27017/kaleem_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
