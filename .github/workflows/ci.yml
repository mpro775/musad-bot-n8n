name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/kaleem-api

jobs:
  lint_type_test:
    name: Lint • Typecheck • Tests (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        node: [22]
    services:
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: mongo:7
        ports: ['27017:27017']
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check (build dry-run)
        run: npm run build

      - name: Unit tests with coverage
        run: npm run test:cov

      - name: Upload coverage artifact
        if: matrix.node == 22
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

      - name: Enforce coverage thresholds
        if: matrix.node == 22
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc
          echo "=== Coverage Report ==="
          jq '.total' coverage/coverage-summary.json

          # Check each threshold
          STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
          LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
          FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)

          echo "Statements: ${STATEMENTS}% (required: 70%)"
          echo "Lines: ${LINES}% (required: 70%)"
          echo "Branches: ${BRANCHES}% (required: 60%)"
          echo "Functions: ${FUNCTIONS}% (required: 40%)"

          # Check thresholds
          if [ $(echo "${STATEMENTS} < 70" | bc -l) -eq 1 ]; then echo "❌ Statements coverage below 70%"; exit 1; fi
          if [ $(echo "${LINES} < 70" | bc -l) -eq 1 ]; then echo "❌ Lines coverage below 70%"; exit 1; fi
          if [ $(echo "${BRANCHES} < 60" | bc -l) -eq 1 ]; then echo "❌ Branches coverage below 60%"; exit 1; fi
          if [ $(echo "${FUNCTIONS} < 40" | bc -l) -eq 1 ]; then echo "❌ Functions coverage below 40%"; exit 1; fi

          echo "✅ All coverage thresholds met!"

      - name: E2E / Integration tests (PRs only)
        if: github.event_name == 'pull_request'
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/kaleem_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run test:e2e

  security_fs_scan:
    name: Security Scan (FS)
    runs-on: ubuntu-latest
    needs: lint_type_test
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs.sarif'

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

  build_push_scan_image:
    name: Build • Push • Scan Image • SBOM
    runs-on: ubuntu-latest
    needs: [lint_type_test, security_fs_scan]
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.version }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build & Push (amd64,arm64)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Trivy Image scan (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: SBOM (SPDX)
        uses: anchore/sbom-action@v0.15.11
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
