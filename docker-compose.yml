version: '3.8'

services:
  # Redis الرئيسي
  redis:
    image: redis:6-alpine
    container_name: musaidbot-redis
    command: ['redis-server', '--requirepass', 'strongpassword']
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backnet

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant # مهم للاتصال من حاويات أخرى
    restart: always
    ports:
      - '6333:6333'
    volumes:
      - ./qdrant_data:/qdrant/storage
    networks:
      - backnet # تأكد أن جميع الحاويات تستخدم نفس الشبكة
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:6333']
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo:5
    container_name: musaidbot-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: strongpassword
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'mongo --quiet --eval "db.adminCommand(''ping'')" || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backnet

  # mongo-express لإدارة MongoDB عبر الويب
  mongo-express:
    image: mongo-express:latest
    container_name: musaidbot-mongo-express
    environment:
      ME_CONFIG_MONGODB_SERVER: 'mongo'
      ME_CONFIG_MONGODB_ADMINUSERNAME: '${MONGO_INITDB_ROOT_USERNAME}'
      ME_CONFIG_MONGODB_ADMINPASSWORD: '${MONGO_INITDB_ROOT_PASSWORD}'
      ME_CONFIG_MONGODB_AUTH_DATABASE: 'admin'
      ME_CONFIG_MONGODB_URL: 'mongodb://mongo:27017'
    ports:
      - '8081:8081'
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - backnet

  # Redis Commander لإدارة Redis عبر الويب
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: musaidbot-redis-commander
    environment:
      REDIS_HOSTS: 'local:redis:6379'
    ports:
      - '8082:8081'
    depends_on:
      - redis
    networks:
      - backnet

  # الـ API الخاص بتطبيقك
  api:
    build: .
    container_name: musaidbot-api
    ports:
      - '3000:3000'
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - backnet
  evolution-api:
    image: atendai/evolution-api
    container_name: musaidbot-evolution-api
    ports:
      - '8088:8080' # استخدم بورت مختلف عن n8n أو الخدمات الأخرى
    env_file:
      - .env.evolution # ملف متغيرات منفصل
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - backnet

  # n8n الأتمتة
  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    container_name: musaidbot-n8n
    env_file:
      - .env
    ports:
      - '5678:5678'
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5678/rest/healthz']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backnet

volumes:
  redis_data:
  mongo_data:
  n8n_data:

networks:
  backnet:
    driver: bridge
